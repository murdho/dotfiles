# Meta
alias ealias='vim ~/.aliasrc'
alias ralias='. ~/.aliasrc'

# Projects
alias dev='~/Developer'
setopt auto_cd
cdpath+=~/Developer

# Shitty First Draft
alias sfd-init-rb='touch lib/shittyfirstdraft.rb'
alias sfd-init-go='mkdir -p cmd/sfd && echo "package main\n\nfunc main() {\n\tprintln(\"sfd\")\n}\n" > cmd/sfd/sfd.go'
alias gosfd='go run cmd/sfd/sfd.go'

# Ruby
alias serve_dir='ruby -run -ehttpd . -p8000'
alias rtags='ctags -R --languages=ruby --exclude=.git --exclude=log'
alias rtags-gems='ctags -R --languages=ruby --exclude=.git --exclude=log --exclude=.gems . $(bundle list --paths)'
alias prettyjson='ruby -r json -r ap -e "ap JSON.parse(ARGF.read)"'
alias yaml2json='ruby -r yaml -r json -e "raise %|Missing required .yml argument| unless ARGV[0]; puts JSON.pretty_generate(YAML.load_file(ARGV[0]))"'
alias ruby2json='ruby -r json -e "puts JSON.pretty_generate(eval(ARGF.read))"'

# Rails
alias rdo='rake db:migrate:redo'
alias rdmd='rake db:migrate:down'
alias rcs='rails console -s'
alias rt='rails test'
alias rtf='rails test $(fzf)'
alias rdu='rake db:dumbify'
alias rdmu='rake db:migrate; rake db:dumbify'
alias rdds='rake db:drop db:setup'
alias rds='rake db:setup'
alias rap='rails assets:precompile'
alias rac='rails assets:clean'
alias bess='bundle exec spring stop'
alias rg='rails generate'

# Bundler
alias be='bundle exec'
alias berc='bundle exec rubocop'
alias berca='bundle exec rubocop -a'
alias bers='bundle exec rspec'
alias bi='bundle install'
alias biv='bundle install --path=vendor'
alias bpa='bundle package --all --all-platforms'
alias bipa='bi && bpa'
alias bivpa='biv && bpa'
alias ber='bundle exec rerun --'

# Foreman
alias fm='foreman'
alias fms='foreman start'

# Git
alias gds='git diff --staged'
alias gpf='ggpush --force-with-lease'
alias grbi2='git rebase -i HEAD~2'
alias grbi3='git rebase -i HEAD~3'
alias gbdf='gb -D $(gb | fzf -m)'
alias gmm='gco master && gl && gco - && gm master --no-edit'
alias glsu='ggsup; gl'
alias glsup='glsu'
alias gcleanf='git clean -df'

gcof() { # checkout git branch
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

gcorf() { # checkout git branch (including remote branches)
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# Git Flow
alias gff='git flow feature'
alias gffs='gff start'
alias gfff='gff finish'
alias gfh='git flow hotfix'
alias gfhs='gfh start'
alias gfhf='gfh finish -n'

# Conventional Commits
alias convcoms='cat ~/Documents/commit-types.md'

# GPG
alias encrypt='gpg --armor --symmetric --cipher-algo AES256'

# DNS cache
alias cleardnscache='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'

# Vim
alias vimrc='vim ~/.vimrc'
# alias vimsnip='vim ~/.vim/snippets'
alias vimf='vim $(fzf)'

# System
mkcd () {
  mkdir -p "$*"
  cd "$*"
}

alias htop='sudo htop'
alias sdel='srm -v'
alias sdelr='srm -rv'

# Watch
alias watch='watch -n 1 ' # If the last character of the alias value is a blank, then the next command word following the alias is also checked for alias expansion.

# Vagrant
alias v='vagrant'
alias vu='vagrant up'
alias vs='vagrant ssh'
alias vr='vagrant reload'
alias vh='vagrant halt'
alias vd='vagrant destroy'
alias desktopshow='defaults write com.apple.finder CreateDesktop true; killall Finder'
alias desktophide='defaults write com.apple.finder CreateDesktop false; killall Finder'

# Util
# uuid() generates UUID, prints it and copies to clipboard.
uuid() {
  local UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  echo $UUID | tr -d '\n' | pbcopy
  echo $UUID
}

ulid() {
  local ULID=$(ulid-original)
  echo $ULID | tr -d '\n' | pbcopy
  echo $ULID
}

# todo is very simple solution for quick, short-term notes
# todo() {
# if [[ -z "$1" ]]; then
# cat ./TODO
# else
# echo "$@" >> ./TODO
# fi
# }

# find_and_replace
find_and_replace() {
  ag $1 --files-with-matches | xargs -I {} gsed -i '.back' -e "s/$1/$2/g" {}
}

# Redis (containerized)
# alias redis-cli='docker exec -it redis redis-cli'

# Postgres
# recreatedb() recreates local DB that has the same name as its owner.
recreatedb() {
  psql -ec "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = '$1' AND pid <> pg_backend_pid();"
  psql -ec "DROP DATABASE IF EXISTS $1;"
  psql -ec "CREATE DATABASE $1 WITH OWNER $1;"
}

# Go
alias goplay='mkdir -p ~/Developer/golang/src/play; cd ~/Developer/golang/src/play'
alias gomurdho='mkdir -p ~/Developer/golang/src/github.com/murdho; cd ~/Developer/golang/src/github.com/murdho'
alias gt='go test -v ./...'
# alias b='buffalo'

# Python
alias p3='python3'

# Notes
alias notes='cd ~/Dropbox/notes'

# Kubernetes
alias k='kubectl'
alias kctx='kubectx'
alias kns='kubens'
alias kall='kubectl get all -A'
alias mk='minikube'

# Docker
alias dk='docker'
alias dkc='docker-compose'

# Attach to docker-compose service container
dkc-attach() {
   if [ $# -eq 1 ]; then
        docker attach $(docker-compose ps -q $1)
    else
        echo "Usage: dkc-attach [service name]"
    fi
}

# What process is listening on a port?
listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P

    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

# Google Cloud
gsutildl() {
    gsutil cp $1 .
}

# ipinfo.io
ipinfo() {
    curl -s 'https://ipinfo.io/widget' -H 'referer: https://ipinfo.io/' | jq
}

# Toggle dark mode
dark-mode() {
  osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to not dark mode'
}

# NPM
alias nr='npm run'
alias nrd='nr dev'
alias nrl='nr lint'
alias nrf='nr format'
alias nrb='nr build'

# Multipass
alias m='multipass'
alias ms='multipass shell'
alias ml='multipass ls'

# Civo
# alias c='civo'
# alias ck='civo kubernetes'

# OpenFaaS
#alias f='faas-cli'

# The Silver Searcher
alias ag='ag --hidden'

# Edit hosts
alias hosts='sudo vim /etc/hosts'
